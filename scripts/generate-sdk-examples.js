#!/usr/bin/env node
/**
 * AI-powered SDK example generator
 * Uses GPT-4 to create diverse, practical examples for developers
 */

const fs = require('fs');
const path = require('path');

const EXAMPLE_PROMPTS = [
  {
    name: 'p2p-podcast',
    description: 'Distributed podcast transcription and sharing',
    prompt: `Create a Node.js example that uses LucidTalk SDK to:
    1. Transcribe podcast episodes in real-time
    2. Generate episode summaries with timestamps
    3. Share episodes via P2P with listeners
    4. Allow listeners to search transcripts
    Focus on privacy and decentralization.`
  },
  {
    name: 'study-assistant',
    description: 'AI-powered lecture transcription and Q&A',
    prompt: `Create a study assistant app using LucidTalk SDK that:
    1. Records and transcribes lectures
    2. Extracts key concepts and definitions
    3. Generates study guides and flashcards
    4. Allows students to ask questions about the content
    Make it privacy-focused for educational use.`
  },
  {
    name: 'interview-tool',
    description: 'Privacy-first interview transcription',
    prompt: `Build an interview transcription tool with LucidTalk SDK that:
    1. Records interviews with consent
    2. Identifies speakers automatically
    3. Generates interview summaries
    4. Exports in multiple formats (PDF, DOCX, JSON)
    Emphasize privacy and compliance features.`
  },
  {
    name: 'team-standup',
    description: 'Automated daily standup recorder',
    prompt: `Create a team standup automation tool using LucidTalk SDK:
    1. Automatically joins daily standup meetings
    2. Tracks what each team member is working on
    3. Identifies blockers and action items
    4. Sends recap to team channel (Slack/Discord)
    Focus on productivity and async team updates.`
  },
  {
    name: 'voice-journaling',
    description: 'Private voice journaling with AI insights',
    prompt: `Build a voice journaling app with LucidTalk SDK that:
    1. Records daily voice journals
    2. Transcribes and organizes entries by date/topic
    3. Provides AI insights on mood and patterns
    4. Keeps everything completely private/local
    Perfect for personal development and mental health.`
  }
];

async function generateExample(exampleConfig) {
  console.log(`🤖 Generating example: ${exampleConfig.name}`);
  
  const exampleDir = path.join(__dirname, '../examples', exampleConfig.name);
  
  // Create directory
  if (!fs.existsSync(exampleDir)) {
    fs.mkdirSync(exampleDir, { recursive: true });
  }

  // Generate package.json
  const packageJson = {
    name: `lucidtalk-${exampleConfig.name}-example`,
    version: "1.0.0",
    description: exampleConfig.description,
    main: "index.js",
    scripts: {
      start: "node index.js",
      dev: "nodemon index.js"
    },
    dependencies: {
      "lucidtalk-core": "^1.0.0",
      "dotenv": "^16.0.0"
    },
    devDependencies: {
      "nodemon": "^3.0.0"
    },
    keywords: ["lucidtalk", "p2p", "privacy", "ai", "transcription"],
    author: "LucidTalk Community",
    license: "MIT"
  };

  fs.writeFileSync(
    path.join(exampleDir, 'package.json'),
    JSON.stringify(packageJson, null, 2)
  );

  // Generate .env.example
  const envExample = `# LucidTalk ${exampleConfig.name} Configuration

# AI Providers (optional - works locally without these)
OPENAI_API_KEY=your_openai_key_here
ANTHROPIC_API_KEY=your_anthropic_key_here
GROQ_API_KEY=your_groq_key_here

# App-specific settings
NODE_ENV=development
LOG_LEVEL=info
`;

  fs.writeFileSync(path.join(exampleDir, '.env.example'), envExample);

  // Generate basic index.js (this would be enhanced by AI in real implementation)
  const basicIndexJs = `/**
 * ${exampleConfig.description}
 * Generated by LucidTalk AI SDK Generator
 */

const { LucidTalk } = require('lucidtalk-core');
require('dotenv').config();

class ${toPascalCase(exampleConfig.name)} {
  constructor() {
    this.lucidtalk = new LucidTalk({
      privacy: 'local-only',
      ai: process.env.AI_PROVIDER || 'local',
      p2p: true,
      apiKeys: {
        openai: process.env.OPENAI_API_KEY,
        anthropic: process.env.ANTHROPIC_API_KEY,
        groq: process.env.GROQ_API_KEY
      }
    });

    this.setupEventHandlers();
  }

  setupEventHandlers() {
    this.lucidtalk.onTranscription((event) => {
      if (event.isFinal) {
        console.log(\`[\${new Date(event.timestamp).toLocaleTimeString()}] \${event.text}\`);
      }
    });

    this.lucidtalk.onSessionUpdate((session) => {
      console.log('Session updated:', session.id);
    });
  }

  async start() {
    console.log('🚀 Starting ${exampleConfig.description}...');
    
    try {
      const session = await this.lucidtalk.startTranscription();
      console.log(\`✅ Started with session ID: \${session.id}\`);
      return session;
    } catch (error) {
      console.error('❌ Failed to start:', error);
      throw error;
    }
  }

  async generateSummary() {
    try {
      const summary = await this.lucidtalk.summarize({
        template: 'meeting-notes',
        includeActionItems: true,
        includeKeyPoints: true
      });
      
      console.log('📋 Summary generated:');
      console.log(summary);
      return summary;
    } catch (error) {
      console.error('❌ Failed to generate summary:', error);
    }
  }

  async stop() {
    console.log('🛑 Stopping...');
    await this.lucidtalk.stopTranscription();
    console.log('✅ Stopped');
  }
}

// Example usage
async function main() {
  const app = new ${toPascalCase(exampleConfig.name)}();
  
  const session = await app.start();
  
  // Handle graceful shutdown
  process.on('SIGINT', async () => {
    console.log('\\n👋 Shutting down...');
    await app.generateSummary();
    await app.stop();
    process.exit(0);
  });

  console.log('🕐 Running... (Press Ctrl+C to stop)');
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = ${toPascalCase(exampleConfig.name)};
`;

  fs.writeFileSync(path.join(exampleDir, 'index.js'), basicIndexJs);

  // Generate README
  const readme = `# 🚀 ${exampleConfig.description}

${exampleConfig.prompt}

## Quick Start

\`\`\`bash
cd examples/${exampleConfig.name}
npm install
cp .env.example .env
npm start
\`\`\`

## Features

- 🔒 **Privacy-First**: All processing happens locally
- 🤖 **AI-Powered**: Smart transcription and summarization  
- 🌐 **P2P Sharing**: Decentralized sharing without servers
- ⚡ **Real-Time**: Live transcription and analysis

## Configuration

Edit \`.env\` file to configure:

\`\`\`env
# Choose your AI provider
AI_PROVIDER=openai  # or 'anthropic', 'groq', 'local'

# API keys (optional for local-only mode)
OPENAI_API_KEY=your_key_here
\`\`\`

## Usage

\`\`\`javascript
const { ${toPascalCase(exampleConfig.name)} } = require('./index');

const app = new ${toPascalCase(exampleConfig.name)}();
await app.start();
\`\`\`

## License

MIT - Feel free to use in your own projects!

## Contributing

Found an issue or want to improve this example? 
[Open an issue](https://github.com/sarvesh610/lucidtalk/issues) or submit a PR!
`;

  fs.writeFileSync(path.join(exampleDir, 'README.md'), readme);

  console.log(`✅ Generated example: ${exampleConfig.name}`);
}

function toPascalCase(str) {
  return str.split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('');
}

async function main() {
  console.log('🤖 Generating LucidTalk SDK examples...');
  
  for (const example of EXAMPLE_PROMPTS) {
    await generateExample(example);
  }
  
  console.log('✅ All examples generated!');
  console.log('📂 Check the examples/ directory for new examples');
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { generateExample, EXAMPLE_PROMPTS };